import requests
from unittest import TestCase
import pytest

from main import sort_uniq_names, top_three_popular_name, longest_shortest_courses, add_folder_yandex_disk, check_folder_yandex_disk

'''Задача №1 unit-tests
Напишите тесты на любые 3 задания из занятия «Коллекции данных» модуля «Основы языка программирования Python». Используйте своё решение домашнего задания'''

class TestSort_uniq_names(TestCase) :

    def setUp(self) -> None:
        self.mentors = [
	["Евгений Шмаргунов", "Олег Булыгин", "Дмитрий Демидов", "Кирилл Табельский", "Александр Ульянцев", "Александр Бардин", "Александр Иванов", "Антон Солонилин", "Максим Филипенко", "Елена Никитина", "Азамат Искаков", "Роман Гордиенко"],
	["Филипп Воронов", "Анна Юшина", "Иван Бочаров", "Анатолий Корсаков", "Юрий Пеньков", "Илья Сухачев", "Иван Маркитан", "Ринат Бибиков", "Вадим Ерошевичев", "Тимур Сейсембаев", "Максим Батырев", "Никита Шумский", "Алексей Степанов", "Денис Коротков", "Антон Глушков", "Сергей Индюков", "Максим Воронцов", "Евгений Грязнов", "Константин Виролайнен", "Сергей Сердюк", "Павел Дерендяев"],
	["Евгений Шмаргунов", "Олег Булыгин", "Александр Бардин", "Александр Иванов", "Кирилл Табельский", "Александр Ульянцев", "Роман Гордиенко", "Адилет Асканжоев", "Александр Шлейко", "Алена Батицкая", "Денис Ежков", "Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Максим Филипенко", "Елена Никитина"],
	["Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Валерий Хаслер", "Татьяна Тен", "Александр Фитискин", "Александр Шлейко", "Алена Батицкая", "Александр Беспоясов", "Денис Ежков", "Николай Лопин", "Михаил Ларченко"]
]
        return super().setUp()

    def test_all_names_sort_uniq_names(self) :
        real_res = sort_uniq_names(self.mentors)
        expected = ['Адилет', 'Азамат', 'Александр', 'Алексей', 'Алена', 'Анатолий', 'Анна', 'Антон', 'Вадим', 'Валерий', 'Владимир', 'Денис', 'Дмитрий', 'Евгений', 'Елена', 'Иван', 'Илья', 'Кирилл', 'Константин', 'Максим', 'Михаил', 'Никита', 'Николай', 'Олег', 'Павел', 'Ринат', 'Роман', 'Сергей', 'Татьяна', 'Тимур', 'Филипп', 'Эдгар', 'Юрий']
        self.assertEqual(real_res, expected)

    def test_all_names_reverse_sort_uniq_names(self) :
        real_res = sort_uniq_names(self.mentors[::-1])
        expected = ['Адилет', 'Азамат', 'Александр', 'Алексей', 'Алена', 'Анатолий', 'Анна', 'Антон', 'Вадим', 'Валерий', 'Владимир', 'Денис', 'Дмитрий', 'Евгений', 'Елена', 'Иван', 'Илья', 'Кирилл', 'Константин', 'Максим', 'Михаил', 'Никита', 'Николай', 'Олег', 'Павел', 'Ринат', 'Роман', 'Сергей', 'Татьяна', 'Тимур', 'Филипп', 'Эдгар', 'Юрий']
        self.assertEqual(real_res, expected)

    def test_slice_sort_uniq_names(self) :
            real_res = sort_uniq_names(self.mentors[1:-1])
            expected = ['Адилет', 'Александр', 'Алексей', 'Алена', 'Анатолий', 'Анна', 'Антон', 'Вадим', 'Владимир', 'Денис', 'Евгений', 'Елена', 'Иван', 'Илья', 'Кирилл', 'Константин', 'Максим', 'Никита', 'Олег', 'Павел', 'Ринат', 'Роман', 'Сергей', 'Тимур', 'Филипп', 'Эдгар', 'Юрий']
            self.assertEqual(real_res, expected)


class TestTop_three_popular_name(TestCase) :

    def setUp(self) -> None:
        self.mentors = [
	["Евгений Шмаргунов", "Олег Булыгин", "Дмитрий Демидов", "Кирилл Табельский", "Александр Ульянцев", "Александр Бардин", "Александр Иванов", "Антон Солонилин", "Максим Филипенко", "Елена Никитина", "Азамат Искаков", "Роман Гордиенко"],
	["Филипп Воронов", "Анна Юшина", "Иван Бочаров", "Анатолий Корсаков", "Юрий Пеньков", "Илья Сухачев", "Иван Маркитан", "Ринат Бибиков", "Вадим Ерошевичев", "Тимур Сейсембаев", "Максим Батырев", "Никита Шумский", "Алексей Степанов", "Денис Коротков", "Антон Глушков", "Сергей Индюков", "Максим Воронцов", "Евгений Грязнов", "Константин Виролайнен", "Сергей Сердюк", "Павел Дерендяев"],
	["Евгений Шмаргунов", "Олег Булыгин", "Александр Бардин", "Александр Иванов", "Кирилл Табельский", "Александр Ульянцев", "Роман Гордиенко", "Адилет Асканжоев", "Александр Шлейко", "Алена Батицкая", "Денис Ежков", "Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Максим Филипенко", "Елена Никитина"],
	["Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Валерий Хаслер", "Татьяна Тен", "Александр Фитискин", "Александр Шлейко", "Алена Батицкая", "Александр Беспоясов", "Денис Ежков", "Николай Лопин", "Михаил Ларченко"]
]
        return super().setUp()

    def test_all_names_top_three_popular_name(self) :
        real_res = top_three_popular_name(self.mentors)
        expected = ['Александр: 10 раз(а)', 'Евгений: 5 раз(а)', 'Максим: 4 раз(а)']
        self.assertAlmostEqual(real_res, expected)         

    def test_reverse_top_three_popular_name(self) :
        real_res = top_three_popular_name(self.mentors[::-1])
        expected = ['Александр: 10 раз(а)', 'Евгений: 5 раз(а)', 'Максим: 4 раз(а)']
        self.assertAlmostEqual(real_res, expected)         

    def test_isinstance_top_three_popular_name(self) :
        real_res = top_three_popular_name(self.mentors)
        self.assertIsInstance(real_res, list)         


class TestLongest_shortest_courses(TestCase) :

    def setUp(self) -> None:
        self.mentors = [
	["Евгений Шмаргунов", "Олег Булыгин", "Дмитрий Демидов", "Кирилл Табельский", "Александр Ульянцев", "Александр Бардин", "Александр Иванов", "Антон Солонилин", "Максим Филипенко", "Елена Никитина", "Азамат Искаков", "Роман Гордиенко"],
	["Филипп Воронов", "Анна Юшина", "Иван Бочаров", "Анатолий Корсаков", "Юрий Пеньков", "Илья Сухачев", "Иван Маркитан", "Ринат Бибиков", "Вадим Ерошевичев", "Тимур Сейсембаев", "Максим Батырев", "Никита Шумский", "Алексей Степанов", "Денис Коротков", "Антон Глушков", "Сергей Индюков", "Максим Воронцов", "Евгений Грязнов", "Константин Виролайнен", "Сергей Сердюк", "Павел Дерендяев"],
	["Евгений Шмаргунов", "Олег Булыгин", "Александр Бардин", "Александр Иванов", "Кирилл Табельский", "Александр Ульянцев", "Роман Гордиенко", "Адилет Асканжоев", "Александр Шлейко", "Алена Батицкая", "Денис Ежков", "Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Максим Филипенко", "Елена Никитина"],
	["Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Валерий Хаслер", "Татьяна Тен", "Александр Фитискин", "Александр Шлейко", "Алена Батицкая", "Александр Беспоясов", "Денис Ежков", "Николай Лопин", "Михаил Ларченко"]
]
        self.courses = ["Python-разработчик с нуля", "Java-разработчик с нуля", "Fullstack-разработчик на Python", "Frontend-разработчик с нуля"]
        self.durations = [14, 20, 12, 20]
        return super().setUp()

    def test_simple_data_longest_shortest_courses(self) :
        real_res = longest_shortest_courses(self.mentors, self.courses, self.durations)
        expected = (['Fullstack-разработчик на Python'], ['Java-разработчик с нуля', 'Frontend-разработчик с нуля'])
        self.assertEqual(real_res, expected)
        self.assertIsInstance(real_res, tuple)

    def test_change_data_longest_shortest_courses(self) :
        self.new_durations = [14, 13, 12, 11]
        real_res = longest_shortest_courses(self.mentors, self.courses, self.new_durations)
        expected = (['Frontend-разработчик с нуля'], ['Python-разработчик с нуля'])
        self.assertEqual(real_res, expected)
        self.assertIsInstance(real_res, tuple)

    def test_same_data_longest_shortest_courses(self) :
            self.new_durations = [14, 14, 14, 14]
            real_res = longest_shortest_courses(self.mentors, self.courses, self.new_durations)
            expected = ([], ['Python-разработчик с нуля', 'Java-разработчик с нуля', 'Fullstack-разработчик на Python', 'Frontend-разработчик с нуля'])
            self.assertEqual(real_res, expected)
            self.assertIsInstance(real_res, tuple)        

# Задание 1 через PyTest
class TestPytest_sort_uniq_names :

    @pytest.mark.parametrize(
            'ment, expected', [
                ([['Евгений Шмаргунов'], ['Анна Юшина'], ['Михаил Ларченко'], ['Адилет Асканжоев']],  ['Адилет', 'Анна', 'Евгений', 'Михаил']),
                ([['Александр Беспоясов'], ['Александр Фитискин'], ['Александр Шлейко'], ['Александр Иванов']], ['Александр'])
            ]
    )
    def test_sort_uniq_names(self, ment, expected) :
        real_res = sort_uniq_names(ment)
        assert real_res == expected



# '''Задача №2 Автотест API Яндекса
# Проверим правильность работы Яндекс.Диск REST API. Написать тесты проверяющий создание папки на Диске. Используя библиотеку requests напишите unit-test на верный ответ и возможные отрицательные тесты на ответы с ошибкой'''

# необходимо подставить токен от ЯндексДиска и имя папки
token = ...
folder_name = ...

class TestAdd_folder_yandex_disk(TestCase) :
    '''Класс проверяет работу функции по созданию папки на яндекс диске, через статус ответа и по наличию папки с таким именем на диске'''
    def setUp(self) -> None:
        self.token_ = token
        self.folder_name_= folder_name
        return super().setUp()
    
    def test_1(self) :
        real_res = add_folder_yandex_disk(self.token_, self.folder_name_)
        chek_reasponse = check_folder_yandex_disk(self.token_, self.folder_name_)        
        self.assertGreaterEqual(real_res, 200)
        self.assertLess(real_res, 300)
        self.assertEqual(chek_reasponse, 200)